# This file was *autogenerated* from the file Hellman.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_0p5768 = RealNumber('0.5768'); _sage_const_64 = Integer(64); _sage_const_1p5 = RealNumber('1.5'); _sage_const_0p50 = RealNumber('0.50'); _sage_const_2p0 = RealNumber('2.0'); _sage_const_0p9 = RealNumber('0.9'); _sage_const_2p25 = RealNumber('2.25'); _sage_const_64p0 = RealNumber('64.0')
import sys
from sage.all import *
I = _sage_const_64p0 
N = _sage_const_2 **I
mx=[_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,_sage_const_1 ]
def eq1(y,h):
    x=var('x')
    sol = solve(_sage_const_2 **(_sage_const_64 /y)*((_sage_const_2 **(_sage_const_64 /x))**_sage_const_2 )==h*N,x,solution_dict=True);sol
    return [ abs(n(s[x])) for s in sol]
def T(hmsc,hps,Hcr,y):
    return n((_sage_const_1 /hmsc+_sage_const_1 /_sage_const_6 )*(hps/Hcr)*(_sage_const_2 **(_sage_const_64 /y))**_sage_const_2 )

def M(n,hs,x,y):
    return (n*hs)/(_sage_const_2 **(_sage_const_64 /x)*(_sage_const_2 **(_sage_const_64 /y)))*_sage_const_2 **(_sage_const_64 /x)
#Htc=(((1/Hmsc)+(1/6))*(1/(Hcr**3)))*Hps*(ln(1-Hps))**2
def CalcStuffs(hps,hmsc):
    ##############
    #Coverage Rate
    #############
    Hcr=(sqrt(_sage_const_2 )/sqrt(hmsc))*((e**(sqrt(_sage_const_2 *hmsc))-_sage_const_1 )/(e**(sqrt(_sage_const_2 *hmsc))+_sage_const_1 ))

    #############
    #Time memory tradeof Curve coeiffiecient
    #############
    Htc=(((_sage_const_1 /hmsc)+(_sage_const_1 /_sage_const_6 ))*(((sqrt(hmsc)/sqrt(_sage_const_2 ))*((e**(sqrt(_sage_const_2 *hmsc))+_sage_const_1 )/(e**(sqrt(_sage_const_2 *hmsc))-_sage_const_1 )))**_sage_const_3 )*hps*(ln(_sage_const_1 -hps))**_sage_const_2 )

    #############
    #Precomputation cost
    ############
    Hpc=(sqrt(hmsc)/sqrt(_sage_const_2 ))*((e**(sqrt(_sage_const_2 *hmsc))+_sage_const_1 )/(e**(sqrt(_sage_const_2 *hmsc))-_sage_const_1 ))*(-ln(_sage_const_1 -hps))

    print(" For probability: %.2f and matrix stopping constant: %.2f\n Has coverage: %.4f \n tm-coeif: %.4f \n Precomputational cost: %.4f\n"%(hps,hmsc,Hcr,Htc,Hpc))

    a=_sage_const_1p5 
    for h in range(_sage_const_0 ,len(mx)):
        mx[h]=(a,eq1(a,hmsc)[_sage_const_0 ])
        a=a+_sage_const_0p50 
   # print(mx)
    for k in range(_sage_const_0 ,len(mx)):
        print("     For m: 2^%i and t: 2^%i \n     Time: 2^%i \n     Memory: 2^%i\n"%(log(_sage_const_2 **(_sage_const_64 /mx[k][_sage_const_0 ]))/log(_sage_const_2 ) , log(_sage_const_2 **(_sage_const_64 /mx[k][_sage_const_1 ]))/log(_sage_const_2 ) , log(T(hmsc,hps,Hcr,mx[k][_sage_const_1 ]))/log(_sage_const_2p0 ) ,log(M(N,n(Hpc),mx[k][_sage_const_0 ],mx[k][_sage_const_1 ]))/log(_sage_const_2p0 )))
    print("\n\n")

CalcStuffs(_sage_const_0p5768 ,_sage_const_2p25 )
CalcStuffs(_sage_const_0p5768 ,_sage_const_1 )
CalcStuffs(_sage_const_0p9 ,_sage_const_1 )
